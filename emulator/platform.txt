###################################################################################################
# 
# KLANGSTROM
#
# see https://arduino.github.io/arduino-cli/latest/platform-specification/
# 
###################################################################################################

name=Klangstrom Emulator New
version=0.0.3

###################################################################################################
#
# COMPILE
#
###################################################################################################

recipe.hooks.prebuild.01.pattern=date
# recipe.hooks.prebuild.02.pattern=echo "+++ runtime.platform.path:" {runtime.platform.path}
# recipe.hooks.prebuild.03.pattern=echo "+++ runtime.hardware.path:" {runtime.hardware.path}
# recipe.hooks.prebuild.04.pattern=echo "+++ runtime.os           :" {runtime.os}
# recipe.hooks.prebuild.05.pattern=echo "+++ name                 :" {name}
# recipe.hooks.prebuild.06.pattern=echo "+++ _id                  :" {_id}
# recipe.hooks.prebuild.07.pattern=echo "+++ build.source.path    :" {build.source.path}
# recipe.hooks.prebuild.08.pattern=echo "+++ extra.time.utc       :" {extra.time.utc}
# recipe.hooks.prebuild.09.pattern=echo "+++ build.path           :" {build.path}
# recipe.hooks.prebuild.10.pattern=echo "+++ build.project_name   :" {build.project_name}
# recipe.hooks.prebuild.11.pattern=echo "+++ build.arch           :" {build.arch}
recipe.hooks.prebuild.12.pattern={runtime.platform.path}/check-for-tools.sh

# TODO this should be configured according to each system â€¦ maybe with a script?
compiler.path.macosx=/usr/bin/
compiler.path.linux=/usr/bin/
compiler.klst_define=
#-DKLST_ARCH=2 -DKLANG_SAMPLES_PER_AUDIO_BLOCK={build.flags.audioblock} {build.flags.OSC} {build.flags.DISPLAY} -DKLANG_AUDIO_RATE={build.flags.samplingrate} -DKLANG_DEBUG_LEVEL=2 -DKLANG_OSC_TRANSMIT_PORT=7001 -DKLANG_OSC_RECEIVE_PORT=7001 -DKLANG_BOARD_EMULATOR={build.flags.board} -DKLST_USE_CMSIS_DSP -DTEST 
# "-I{build.core.path}/{compiler.klst_shared}"

# umgebung
compiler.umgebung_flags=-I{runtime.platform.path}/cores/sdl2/umgebung/include -I{runtime.platform.path}/cores/sdl2/umgebung/src -I{runtime.platform.path}/cores/sdl2/umgebung/include/ip -I{runtime.platform.path}/cores/sdl2/umgebung/include/osc -I/opt/homebrew/include/freetype2/

compiler.umgebung_libs=-L/opt/homebrew/lib -lftgl -framework OpenGL -lGLEW

# TODO this should be collected from `sdl2-config --cflags`
compiler.SDL2_cflags.macosx=-I/opt/homebrew/include/SDL2 -I/opt/homebrew/include/ -D_THREAD_SAFE
compiler.SDL2_cflags.linux=
compiler.SDL2_cflags.windows=

# TODO this should be collectex from `sdl2-config --libs`
compiler.SDL2_libs        = -L/opt/homebrew/lib -lSDL2
# compiler.SDL2_libs.macosx =
# compiler.SDL2_libs.linux  =
# compiler.SDL2_libs.windows=

compiler.c.cmd=gcc
compiler.c.std=c17
compiler.c.flags.macosx= -c -g -MMD -Wall -flto -std={compiler.c.std} {compiler.klst_define}
compiler.c.flags.linux=  -c -g -MMD -Wall -flto -std={compiler.c.std} {compiler.klst_define}
compiler.c.flags.windows=
recipe.c.o.pattern="{compiler.path}{compiler.c.cmd}" {compiler.c.flags} {includes} {compiler.SDL2_cflags} {compiler.umgebung_flags} "{source_file}" -o "{object_file}"

compiler.cpp.cmd=g++
compiler.cpp.std=c++17
compiler.cpp.flags.macosx= -c -g -MMD -Wall -flto -std={compiler.cpp.std} -Wno-long-long -pthread {compiler.klst_define}
compiler.cpp.flags.linux=  -c -g -MMD -Wall -flto -std={compiler.cpp.std} -Wno-long-long -pthread {compiler.klst_define}
compiler.cpp.flags.windows=
recipe.cpp.o.pattern="{compiler.path}{compiler.cpp.cmd}" {compiler.cpp.flags} {includes} {compiler.SDL2_cflags} {compiler.umgebung_flags} "{source_file}" -o "{object_file}"

###################################################################################################
#
# ARCHIVE
#
###################################################################################################

compiler.ar.cmd=ar
compiler.ar.flags=-crs
recipe.ar.pattern="{compiler.path}{compiler.ar.cmd}" {compiler.ar.flags} "{archive_file_path}" "{object_file}"

###################################################################################################
#
# COMBINE/LINK
#
###################################################################################################

compiler.c.linker.cmd=g++
compiler.ldflags=
recipe.c.combine.pattern="{compiler.path}{compiler.c.linker.cmd}" {object_files} {compiler.SDL2_libs} {compiler.umgebung_libs} "{build.path}/{archive_file}" "-L{build.path}" -o "{build.path}/{build.project_name}.exec" {compiler.ldflags}

# copy run script to `/tmp/` ( or similar )
# compiler.execpath=sketch-exec
# compiler.copy.macosx={compiler.execpath}/copy-sketch-exec.macos.sh
# compiler.copy.linux={compiler.execpath}/copy-sketch-exec.linux.sh
# compiler.copy.windows=
# compiler.exec.macosx={compiler.execpath}/sketch-exec.sh
# compiler.exec.linux={compiler.execpath}/sketch-exec.sh
# compiler.exec.windows=
#recipe.hooks.linking.postlink.1.pattern="{build.core.path}/../../{compiler.copy}" "{build.core.path}/../../{compiler.exec}"

###################################################################################################
#
# PREPROCESS
#
###################################################################################################

preproc.includes.cmd.macosx=g++
preproc.includes.cmd.linux=g++
preproc.includes.flags=-w -x c++ -M -MG -MP
recipe.preproc.includes="{compiler.path}{preproc.includes.cmd}" {compiler.cpp.flags} {preproc.includes.flags} {compiler.cpp.extra_flags} {build.extra_flags} {includes} {compiler.SDL2_cflags} {compiler.umgebung_flags} "{source_file}"

preproc.macros.cmd.macosx=g++
preproc.macros.cmd.linux=g++
preproc.macros.flags=-w -x c++ -E -CC
recipe.preproc.macros="{compiler.path}{preproc.macros.cmd}" {compiler.cpp.flags} {preproc.macros.flags} {compiler.cpp.extra_flags} {build.extra_flags} {includes} {compiler.SDL2_cflags} {compiler.umgebung_flags} "{source_file}" -o "{preprocessed_file_path}"

###################################################################################################
#
# UPLOAD
#
###################################################################################################

# run sketch via script ( this prevents the sketch from being shut down by Arduino )
# tools.sdlexecprog.exec.macosx={build.path}/sketch-exec.sh
# tools.sdlexecprog.exec.linux={build.path}/sketch-exec.sh
# tools.sdlexecprog.exec.windows=
# TODO problem with dialog box quitting 
# cannot use the upload script when also using the dialog box with e.g `Card.begin()`
tools.sdlexecprog.upload.pattern="{build.path}/{build.project_name}.exec" {upload.options} --some_argument --some_other_argument
tools.sdlexecprog.upload.params.verbose=
tools.sdlexecprog.upload.params.quiet=

###################################################################################################
#
# CLI
#
###################################################################################################

# sketches can also be compiled and run from CLI e.g:
# 
# arduino-cli compile -v -b    klangstrom:emulator:KLST_EMU MY_SKETCH
# arduino-cli upload -b        klangstrom:emulator:KLST_EMU MY_SKETCH
# arduino-cli compile -u -v -b klangstrom:emulator:KLST_EMU MY_SKETCH # compile+upload
